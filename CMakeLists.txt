cmake_minimum_required(VERSION 2.6)
project(RestfulMapper)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
SET(BUILD_SHARED_LIBS OFF CACHE BOOL "")

# Build YAJL
SET (YAJL_MAJOR 0)
SET (YAJL_MINOR 0)
SET (YAJL_MICRO 0)
if (BORLAND)
  add_definitions(-DLLONG_MAX=_I64_MAX)
  add_definitions(-DLLONG_MIN=_I64_MIN)
endif()
if (BORLAND OR MSYS OR MINGW)
  add_definitions(-Dsprintf_s=snprintf)
endif()
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/vendor/yajl/src)
include_directories(${CMAKE_CURRENT_BINARY_DIR}/vendor/yajl/include)

# Build libcurl
if (BORLAND)
  add_definitions(-DSIZEOF_SIZE_T=4)
endif()
SET(BUILD_CURL_EXE OFF CACHE BOOL "")
SET(BUILD_CURL_TESTS OFF CACHE BOOL "")
SET(CURL_STATICLIB ON CACHE BOOL "")
add_definitions(-DCURL_STATICLIB)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/vendor/curl)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/vendor/curl/include)

# Build libcharset
add_definitions(-DLIBDIR=)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/vendor/libiconv/libcharset)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/vendor/libiconv/libcharset/include)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/vendor/libiconv/libcharset/config.h.in ${CMAKE_CURRENT_BINARY_DIR}/vendor/libiconv/libcharset/config.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/vendor/libiconv/libcharset/include/localcharset.h.in ${CMAKE_CURRENT_BINARY_DIR}/vendor/libiconv/libcharset/include/localcharset.h)
include_directories(${CMAKE_CURRENT_BINARY_DIR}/vendor/libiconv/libcharset)
include_directories(${CMAKE_CURRENT_BINARY_DIR}/vendor/libiconv/libcharset/include)
add_library(charset vendor/libiconv/libcharset/lib/localcharset.c)
set_target_properties(charset PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/vendor/libiconv/libcharset/lib")

# Build libiconv
add_definitions(-DLIBICONV_PLUG)
add_definitions(-DICONV_CONST=)
if (BORLAND)
  add_definitions(-w-par)
  add_definitions(-w-csu)
  add_definitions(-w-ccc)
  add_definitions(-w-rch)
  add_definitions(-w-aus)
  add_definitions(-w-eff)
  SET(EILSEQ 2)
endif()
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/vendor/libiconv)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/vendor/libiconv/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/vendor/libiconv/lib)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/vendor/libiconv/config.h.in ${CMAKE_CURRENT_BINARY_DIR}/vendor/libiconv/config.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/vendor/libiconv/include/iconv.h.in ${CMAKE_CURRENT_BINARY_DIR}/vendor/libiconv/include/iconv.h)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/vendor/libiconv/lib/config.h.in ${CMAKE_CURRENT_BINARY_DIR}/vendor/libiconv/lib/config.h)
include_directories(${CMAKE_CURRENT_BINARY_DIR}/vendor/libiconv)
include_directories(${CMAKE_CURRENT_BINARY_DIR}/vendor/libiconv/include)
include_directories(${CMAKE_CURRENT_BINARY_DIR}/vendor/libiconv/lib)
add_library(iconv vendor/libiconv/lib/iconv.c)
set_target_properties(iconv PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/vendor/libiconv/lib")

# Build RestfulMapper
if (BORLAND)
  add_definitions(-w-hid)
endif()
add_library(restful_mapper src/api.cpp src/mapper.cpp src/collector.cpp src/query.cpp src/json.cpp src/utf8.cpp)
target_link_libraries(restful_mapper libcurl yajl_s iconv charset)

