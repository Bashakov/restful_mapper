{"name":"restful_mapper","tagline":"ORM for consuming RESTful APIs in C++","body":"# restful_mapper #\r\n\r\nORM for consuming RESTful APIs in C++\r\n\r\n[![Build status](https://secure.travis-ci.org/logandk/restful_mapper.png)](http://travis-ci.org/logandk/restful_mapper)\r\n\r\n# Introduction #\r\n\r\n**restful\\_mapper** connects business objects and Representational State\r\nTransfer (REST) web services. It implements object-relational mapping for REST\r\nweb services to provide transparent proxying capabilities between a client\r\n(using **restful_mapper**) and a RESTful web service (that follows the\r\nconventions outlined below).\r\n\r\nThe ideas and design philosophy are directly adopted from [Active Resource][3].\r\nHowever, the API and functionality differ in some areas, where it makes sense.\r\n\r\n## Design goals ##\r\n\r\n* _Simple_: Employ the principle of least surprise -- APIs should be clean and\r\n  intuitive\r\n* _Portable_: Support old compilers -- all code is C++03 and C\r\n* _Robust_: Keep the code base small -- rely on proven and stable libraries to\r\n  provide core functionality\r\n* _Internationalized_: Handle timezones and character sets automatically\r\n\r\n## RESTful web service conventions ##\r\n\r\nRESTful web services come in many different forms, which are not all suitable\r\nfor an ORM-style mapper such as **restful_mapper**. In order to be compatible\r\nwith as many web services as possible, **restful_mapper** complies with the\r\ncurrent best-practice for creating RESTful web services with JSON.\r\n\r\nSpecifically, **restful_mapper** is modelled against the [Flask-Restless][4]\r\nlibrary, which provides full-featured RESTful web services that follow best-\r\npractice design methods.\r\n\r\nThe following basic conventions must be followed by the web service:\r\n\r\n* Uses standard `DELETE`, `GET`, `POST` and `PUT` requests for CRUD-operations\r\n* Collection of objects should use `objects` as the root JSON key\r\n* Objects in a relationship should be represented as nested JSON structures\r\n* If authentication is used, it must be HTTP basic authentication\r\n\r\nFor exact details on expected request and response formats, see [Format of requests and responses][5].\r\n\r\n# Building #\r\n\r\n**restful\\_mapper** is built using [CMake][6].\r\n\r\n## Dependencies ##\r\n\r\nThe following libraries are required to build **restful_mapper**.\r\n\r\n* [libcurl][7] - used for comminucating with the web service over HTTP\r\n* [yajl][8] - used to parse and emit JSON\r\n* [libiconv][9] - used to convert between character sets\r\n* [googletest][10] - required for tests only\r\n\r\nInvoking the following command will download and build these libraries.\r\n\r\n```shell\r\nmake vendor\r\n```\r\n\r\nOn UNIX platforms, [libcurl][7] and [libiconv][9] are typically present on the\r\nsystem, and will not be built by the make command. If they are not present,\r\nthey should be installed using the system package manager.\r\n\r\n## Library ##\r\n\r\nAfter building the dependencies, invoke the following command to build **restful_mapper**.\r\n\r\n```shell\r\nmake\r\n```\r\n\r\nThis will install **restful_mapper** as a static library in the `lib` folder.\r\n\r\n## Tests ##\r\n\r\nThe test suite can be built and run using the following command.\r\n\r\n```shell\r\nmake test\r\n```\r\n\r\n# Usage #\r\n\r\n## API configuration ##\r\n\r\nBefore making any requests to the web service, it must be configured using the\r\nfollowing methods.\r\n\r\nThe root URL of the web service is specified using the `set_url` method:\r\n\r\n```c++\r\nApi::set_url(\"http://localhost:5000/api\");\r\n```\r\n\r\nIf the web service requires authentication, provide the username and password:\r\n\r\n```c++\r\nApi::set_username(\"admin\");\r\nApi::set_password(\"test\");\r\n```\r\n\r\nIf you are using a proxy server, it can be specified through the `HTTP_PROXY`\r\nenvironment variable or using the `set_proxy` method:\r\n\r\n```c++\r\nApi::set_proxy(\"http://myproxy\");\r\n```\r\n\r\n## Mapper configuration ##\r\n\r\nThis example illustrates a complete object mapping:\r\n\r\n```c++\r\nusing namespace std;\r\nusing namespace restful_mapper;\r\n\r\nclass User;\r\n\r\nclass Todo : public Model<Todo>\r\n{\r\npublic:\r\n  Primary id;\r\n  Field<string> task;\r\n  Field<int> priority;\r\n  Field<double> time;\r\n  Field<bool> completed;\r\n  Field<time_t> completed_on;\r\n  Field<int> user_id;\r\n  HasOne<User> user;\r\n\r\n  virtual void map_set(Mapper &mapper) const\r\n  {\r\n    mapper.set(\"id\", id);\r\n    mapper.set(\"task\", task);\r\n    mapper.set(\"priority\", priority);\r\n    mapper.set(\"time\", time);\r\n    mapper.set(\"completed\", completed);\r\n    mapper.set(\"completed_on\", completed_on);\r\n    mapper.set(\"user_id\", user_id);\r\n    mapper.set(\"user\", user);\r\n  }\r\n\r\n  virtual void map_get(const Mapper &mapper)\r\n  {\r\n    mapper.get(\"id\", id);\r\n    mapper.get(\"task\", task);\r\n    mapper.get(\"priority\", priority);\r\n    mapper.get(\"time\", time);\r\n    mapper.get(\"completed\", completed);\r\n    mapper.get(\"completed_on\", completed_on);\r\n    mapper.get(\"user_id\", user_id);\r\n    mapper.get(\"user\", user);\r\n  }\r\n\r\n  virtual std::string endpoint() const\r\n  {\r\n    return \"/todo\";\r\n  }\r\n\r\n  virtual const Primary &primary() const\r\n  {\r\n    return id;\r\n  }\r\n};\r\n\r\nclass User: public Model<User>\r\n{\r\npublic:\r\n  Primary id;\r\n  HasMany<Todo> todos;\r\n  ...\r\n};\r\n```\r\n\r\nAn API entity is declared by creating a class that inherits from and follows the\r\ninterface defined in `restful_mapper::Model`.\r\n\r\nEach entity can hold a number of fields and relationships:\r\n\r\n* `restful_mapper::Primary` -- maps a primary key (integer)\r\n* `restful_mapper::Field<string>` -- maps a string literal (represented in locale charset)\r\n* `restful_mapper::Field<int>` -- maps an integer value\r\n* `restful_mapper::Field<double>` -- maps a floating point value\r\n* `restful_mapper::Field<bool>` -- maps a boolean value\r\n* `restful_mapper::Field<time_t>` -- maps a datetime value (represented in the local timezone)\r\n* `restful_mapper::HasOne<class>` -- maps a one-to-one or many-to-one relationship\r\n* `restful_mapper::HasMany<class>` -- maps a one-to-many relationship\r\n\r\nThe interface specified the following methods, which must be overriden:\r\n\r\n* `virtual void restful_mapper::Model::map_set(Mapper &mapper) const`<br/>\r\n  Invoked upon saving an object to the web service.\r\n* `virtual void restful_mapper::Model::map_get(const Mapper &mapper)`<br/>\r\n  Invoked upon requesting an object from the web service.\r\n* `virtual std::string restful_mapper::Model::endpoint() const`<br/>\r\n  Specifies the API endpoint for this particular model. Relative to the web service\r\n  root URL.\r\n* `virtual const Primary &restful_mapper::Model::primary()` const<br/>\r\n  Specifies the primary key of the model.\r\n\r\n## Working with objects ##\r\n\r\nUsing the models defined above, the following operations are made available by\r\n**restful_mapper**.\r\n\r\n### Requesting data ###\r\n\r\n```c++\r\n// Find a single item by id\r\nTodo t = Todo::find(2);\r\n\r\n// Outputting fields\r\ncout << t.task.get();\r\n\r\n// Explicit conversions\r\ncout << (string) t.task;\r\n\r\n// Reload data from server\r\nt.reload();\r\n\r\n// Get all items in collection\r\nTodo::Collection todos = Todo::find_all();\r\n\r\n// Find an item in the collection by id\r\ntodos.find(4);\r\n\r\n// Find all items in collection where task is \"Do something\"\r\ntodos.find(\"task\", \"Do something\");\r\n\r\n// Find the first item in collection that has been completed\r\ntodos.find_first(\"completed\", true);\r\n```\r\n\r\n### Saving data ###\r\n\r\n```c++\r\n// Create a new item\r\nTodo new_todo;\r\nnew_todo.task = \"Use restful_mapper\";\r\nnew_todo.save();\r\n\r\n// Update an existing item\r\nTodo old_todo = Todo::find(2);\r\nold_todo.completed = true;\r\nold_todo.save();\r\n\r\n// Deleting an item\r\nold_todo.destroy();\r\n\r\n// Create a clone with no id set (i.e. a new database object)\r\nTodo todo_clone = old_todo.clone();\r\ntodo_clone.save();\r\n```\r\n\r\n### Relationships ###\r\n\r\n```c++\r\n// Find an item including related items\r\nUser u = User::find(1);\r\n\r\n// Get a related todo\r\nu.todos[2].task = \"Do something else\";\r\n\r\n// Delete last item\r\nu.todos.pop_back();\r\n\r\n// Add a new related item\r\nTodo new_todo;\r\nnew_todo.task = \"Use restful_mapper\";\r\nu.todos.push_back(new_todo);\r\n\r\n// Save user including all changes to related todos - will delete one, update one and add one todo\r\nu.save();\r\n\r\n// Objects in one-to-one and many-to-one relationships are managed pointers\r\nTodo t = Todo::find(2);\r\ncout << t.user->email.get();\r\n```\r\n\r\n### Querying ###\r\n\r\nSupports the query operations [specified][11] by [Flask-Restless][4].\r\n\r\n```c++\r\n// Query a single item\r\nQuery q;\r\nq(\"task\").like(\"Do someth%\");\r\nq(\"completed\").eq(true);\r\n\r\nTodo todo = Todo::find(q);\r\n\r\n// Query a collection of items\r\nQuery q;\r\nq(\"time\").gt(\"1.45\").lt(\"3.0\");\r\nq.order_by_asc(q.field(\"priority\"));\r\n\r\nTodo::Collection todos = Todo::find_all(q);\r\n```\r\n\r\n### Exceptions ###\r\n\r\nSome API errors are caught using custom exceptions.\r\n\r\n* Internal [libcurl][7] errors are represented as a `restful_mapper::ApiError`,\r\n  which has adds a `code()` method to `std::runtime_error`.\r\n* `restful_mapper::AuthenticationError` is thrown when authentication fails,\r\n  and has the same properties as `restful_mapper::ApiError`.\r\n* `restful_mapper::BadRequestError` is thrown when an error occurs on the API\r\n  side, and has the same properties as `restful_mapper::ApiError`.\r\n* `restful_mapper::ValidationError` is thrown when one or more validation\r\n  errors are thrown by the API. It has the same properties as\r\n  `restful_mapper::ApiError`, but adds an `errors()` method, which returns a\r\n  `restful_mapper::ValidationError::FieldMap` map with field names as keys and\r\n  error messages as values. This map may also be accessed directly through the\r\n  overloaded `operator[]`.\r\n\r\n# Contributing #\r\n\r\nPull requests on [GitHub][1] are very welcome! Please try to follow these simple rules:\r\n\r\n* Please create a topic branch for every separate change you make.\r\n* Make sure your patches are well tested. All tests must pass on [Travis CI][2].\r\n* Update this [`README.md`](http://github.com/logandk/restful_mapper/blob/master/README.md) if applicable.\r\n\r\n# License #\r\n\r\nThis code is copyright 2013 Logan Raarup, and is released under the revised BSD License.\r\n\r\nFor more information, see [`LICENSE`](http://github.com/logandk/restful_mapper/blob/master/LICENSE).\r\n\r\n\r\n[1]: http://github.com/logandk/restful_mapper\r\n[2]: http://travis-ci.org/logandk/restful_mapper\r\n[3]: https://github.com/rails/activeresource\r\n[4]: https://github.com/jfinkels/flask-restless\r\n[5]: https://flask-restless.readthedocs.org/en/latest/requestformat.html\r\n[6]: http://www.cmake.org\r\n[7]: http://curl.haxx.se/libcurl\r\n[8]: http://lloyd.github.io/yajl\r\n[9]: http://www.gnu.org/software/libiconv\r\n[10]: https://code.google.com/p/googletest\r\n[11]: https://flask-restless.readthedocs.org/en/latest/searchformat.html#queryformat\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}